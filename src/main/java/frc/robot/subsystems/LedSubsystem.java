// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;



//import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.CANdle;
import com.ctre.phoenix.led.CANdleConfiguration;
import com.ctre.phoenix.led.CANdleFaults;
//import com.ctre.phoenix.led.CANdleFaults;
import com.ctre.phoenix.led.RainbowAnimation;
import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.Animation;
import com.ctre.phoenix.led.CANdle.LEDStripType;
import edu.wpi.first.wpilibj2.command.SubsystemBase;



//https://team2168.org/javadoc/com/ctre/phoenix/led/CANdle.html STEALING FROM THIS

public class LedSubsystem extends SubsystemBase {
  /** Creates a new ExampleSubsystem. */
  int col = 0;
  boolean rainbow = true;
  CANdle candle = new CANdle(54);
  RainbowAnimation rainbowAnim = new RainbowAnimation(0.25, 0.5, 64); //sets it to URGUHBLED!!! 
  int orangeValue = 1;
  public LedSubsystem() {
    
    CANdleConfiguration config = new CANdleConfiguration();
    config.stripType = LEDStripType.RGB; // set the strip type to RGB
    config.brightnessScalar = 0.05; // dim the LEDs to half brightness
    candle.configAllSettings(config);
  
    //candle.setLEDs(255,255,255); //sets LEDs to WHITE (255 is bright value )
    
    candle.animate(rainbowAnim);

  
    //ErrorCode error = candle.getLastError(); // gets the last error generated by the CANdle
    //CANdleFaults faults = new CANdleFaults();
   // ErrorCode faultsError = candle.getFaults(faults); // fills faults with the current CANdle faults; returns the last error generated
  }



  @Override
  public void periodic() {
    // This method will be called once per scheduler run
    //col = ((int)Math.sin(orangeValue/20)*100)+100;
    //orangeValue += 1;
    if(rainbow == true)
    {
      candle.animate(rainbowAnim);
      //candle.setLEDs(col,col,col);
    }
  ErrorCode error = candle.getLastError(); // gets the last error generated by the CANdle

  CANdleFaults faults = new CANdleFaults();

   ErrorCode faultsError = candle.getFaults(faults);
  }
  


  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run during simulation
  }

   public void callCone(){ //CANdle candle
    //candle.setLEDs(0, 0, 0);
    rainbow = false;
    candle.configFactoryDefault();
    candle.setLEDs(255,140,0);
    //boolean rainbow = false;
  } 
  public void callCube(){
    //candle.setLEDs(0, 0, 0);
    rainbow = false;
    candle.configFactoryDefault();
    candle.setLEDs(235,0,255);
   // boolean rainbow = false;
  }
  public void tasteTheRainbow(){
    candle.configFactoryDefault();
    //boolean rainbow = true;
    //RainbowAnimation rainbowAnim = new RainbowAnimation(0.25, 0.5, 64);
    //candle.setLEDs(Random(0,255),0,255);
    
  }
  public void callNone(){
    candle.configFactoryDefault();
    RainbowAnimation rainbowAnim = new RainbowAnimation(0.25, 0.5, 64);
    //RainbowAnimation rainbowAnim = new RainbowAnimation(0.25, 0.5, 64);
    //candle.animate(rainbowAnim);
    rainbow = true;
  }
  public void callOffYouStupidThing(){
    candle.configFactoryDefault();
    candle.setLEDs(0,0,0); //My eyes, I blind myself for your entertainment you stupid idiotic ERGUHBLED thing

  }

}

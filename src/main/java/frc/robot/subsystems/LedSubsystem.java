// Copyright (c) FIRST and other WPILib contributors.
// Open Source Software; you can modify and/or share it under the terms of
// the WPILib BSD license file in the root directory of this project.

package frc.robot.subsystems;



//import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.CANdle;
import com.ctre.phoenix.led.CANdleConfiguration;
import com.ctre.phoenix.led.CANdleFaults;
//import com.ctre.phoenix.led.RainbowAnimation;
//import com.ctre.phoenix.led.CANdleFaults;
import com.ctre.phoenix.led.RainbowAnimation;
//import com.ctre.phoenix.led.BaseStandardAnimation;
import com.ctre.phoenix.ErrorCode;
import com.ctre.phoenix.led.Animation;
import com.ctre.phoenix.led.CANdle.LEDStripType;
import edu.wpi.first.wpilibj2.command.SubsystemBase;
//import frc.robot.Constants.*;


//https://team2168.org/javadoc/com/ctre/phoenix/led/CANdle.html STEALING FROM THIS

public class LedSubsystem extends SubsystemBase {
  /** Creates a new ExampleSubsystem. */
  int col = 0;
  //boolean rainbow = true;
  public static boolean callingCone = false;
  public static boolean callingCube = false;
  public static boolean callingNone = false;
  CANdle candle = new CANdle(51);
  double brit = 0.5;
  RainbowAnimation rainbowAnim = new RainbowAnimation(0, 0, 64); //sets it to URGUHBLED!!! 
 
  int orangeValue = 1;
  public LedSubsystem() {
    
    CANdleConfiguration config = new CANdleConfiguration();
    config.stripType = LEDStripType.RGB; // set the strip type to RGB
    config.brightnessScalar = 0.5; // dim the LEDs to half brightness
    candle.configAllSettings(config);

    candle.animate(rainbowAnim);
  }



  @Override
  public void periodic() {
    // This method will be called once per scheduler run
    
    
    if((callingCube == false) && (callingCone == false) && (callingNone == false))
    {
      //candle.setLEDs(0,0,0);
      //RainbowAnimation rainbowAnim = new RainbowAnimation(0.8, 0.5, 64);
      
      brit = 0.5;
      rainbowAnim.setNumLed(0);//setBrightness(0.5);
    }

    if(callingCube == true)
    {
      //rainbowAnim.setNumLed(-1);
      //candle.animate(none);
      brit = 0;
      candle.setLEDs(235,0,255); 
      rainbowAnim.setBrightness(0);
      //candle.animate(rainbowAnim);

      // candle.setLEDs(235,0,255,0,1,3);
     // candle.setLEDs(255,255,255,0,3,3);
  
    }
    if(callingCone == true)
    {
      brit = 0;
     // rainbowAnim.setNumLed(-1);
      candle.setLEDs(255,140,0);
      rainbowAnim.setBrightness(brit); 
    }
    if(callingNone == true)
    {
      brit = 0;
      //candle.setLEDs(200,0,0); 
    }


  ErrorCode error = candle.getLastError(); // gets the last error generated by the CANdle

  CANdleFaults faults = new CANdleFaults();

   ErrorCode faultsError = candle.getFaults(faults);
  }
  


  @Override
  public void simulationPeriodic() {
    // This method will be called once per scheduler run during simulation
  }

   public void callCone(){ //CANdle candle
    //candle.setLEDs(0, 0, 0);
    //rainbow = false;
    //candle.configFactoryDefault();
    callingCone = !callingCone;
    callingCube = false;
    callingNone = false;
    //candle.setLEDs(255,140,0);  
    //boolean rainbow = false;
  } 
  public void callCube(){

    //candle.setLEDs(0, 0, 0);
    //rainbow = false;
    //candle.configFactoryDefault();
    callingCone = false;
    callingCube = !callingCube;
    callingNone = false;
    //candle.setLEDs(235,0,255);
   // boolean rainbow = false;
  }

  public void callNone(){
    candle.configFactoryDefault();
   // RainbowAnimation rainbowAnim = new RainbowAnimation(0.25, 0.5, 64);
    //RainbowAnimation rainbowAnim = new RainbowAnimation(0.25, 0.5, 64);
    //candle.animate(rainbowAnim);
    callingCone = false;
    callingCube = false;
    callingNone = !callingNone;
    //rainbow = true;
  }
  public void callOffYouStupidThing(){
    //candle.configFactoryDefault();
    candle.setLEDs(0,0,0); //My eyes, I blind myself for your entertainment you stupid idiotic ERGUHBLED thing

  }

}
